/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import Editor.Archivo;
import Memento.Caretaker;
import Memento.Memento;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.Timer;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Element;
import javax.swing.text.ElementIterator;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.swing.text.StyledEditorKit;

/**
 *
 * @author Gabriel
 */
public class editor extends javax.swing.JFrame {
    Caretaker history = new Caretaker();
    boolean trackKeys = true;
    ActionListener taskPerformer = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            System.out.println("holaTimer");
            trackKeys = true;
        }
    };
    
    Timer timer = new Timer(3000,taskPerformer);
    
    /**
     * Creates new form editor
     */
    public editor() {
        timer.setRepeats(true);
        initComponents();
        this.jTextPane1.setEditorKit(new StyledEditorKit());
        Archivo ar = new Archivo("");
        ar.setDoc(this.jTextPane1.getStyledDocument());
        Memento state = ar.createMemento();
        history.addMemento(state);
        this.jTextPane1.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                
            }

            @Override
            public void keyPressed(KeyEvent e) {
                if(trackKeys){
                    Archivo ar = new Archivo(jTextPane1.getText());
                    ar.setDoc(jTextPane1.getStyledDocument());
                    Memento state = ar.createMemento();
                    history.addMemento(state);
                    trackKeys = false;
                }
                //System.out.println("Hola");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                timer.stop();
                timer.start();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        buttonsOpen = new javax.swing.JButton();
        buttonSave = new javax.swing.JButton();
        buttonCut = new javax.swing.JButton();
        buttonCopy = new javax.swing.JButton();
        buttonPaste = new javax.swing.JButton();
        buttonUndo = new javax.swing.JButton();
        buttonRedo = new javax.swing.JButton();
        botonBlack = new javax.swing.JButton();
        botonBlue = new javax.swing.JButton();
        botonRed = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        toolBar.setRollover(true);

        jButton1.setText("New");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        toolBar.add(jButton1);

        buttonsOpen.setText("Open");
        buttonsOpen.setToolTipText("");
        buttonsOpen.setFocusable(false);
        buttonsOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonsOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonsOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonsOpenActionPerformed(evt);
            }
        });
        toolBar.add(buttonsOpen);

        buttonSave.setText("Save");
        buttonSave.setFocusable(false);
        buttonSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });
        toolBar.add(buttonSave);

        buttonCut.setText("Cut");
        buttonCut.setFocusable(false);
        buttonCut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonCut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCutActionPerformed(evt);
            }
        });
        toolBar.add(buttonCut);

        buttonCopy.setText("Copy");
        buttonCopy.setFocusable(false);
        buttonCopy.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonCopy.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCopyActionPerformed(evt);
            }
        });
        toolBar.add(buttonCopy);

        buttonPaste.setText("Paste");
        buttonPaste.setFocusable(false);
        buttonPaste.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonPaste.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPasteActionPerformed(evt);
            }
        });
        toolBar.add(buttonPaste);

        buttonUndo.setText("Undo");
        buttonUndo.setToolTipText("");
        buttonUndo.setFocusable(false);
        buttonUndo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonUndo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUndoActionPerformed(evt);
            }
        });
        toolBar.add(buttonUndo);

        buttonRedo.setText("Redo");
        buttonRedo.setFocusable(false);
        buttonRedo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonRedo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRedoActionPerformed(evt);
            }
        });
        toolBar.add(buttonRedo);

        botonBlack.setText("Black");
        botonBlack.setFocusable(false);
        botonBlack.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonBlack.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonBlack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBlackActionPerformed(evt);
            }
        });
        toolBar.add(botonBlack);

        botonBlue.setText("Blue");
        botonBlue.setFocusable(false);
        botonBlue.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonBlue.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonBlue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBlueActionPerformed(evt);
            }
        });
        toolBar.add(botonBlue);

        botonRed.setText("Red");
        botonRed.setFocusable(false);
        botonRed.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRed.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRedActionPerformed(evt);
            }
        });
        toolBar.add(botonRed);

        jScrollPane2.setViewportView(jTextPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        JFileChooser fileChooser = new JFileChooser("f:");
        int aprooved = fileChooser.showSaveDialog(null);
        if(aprooved == JFileChooser.APPROVE_OPTION){
            File document = new File(fileChooser.getSelectedFile().getAbsolutePath());
            try{
                FileWriter writter = new FileWriter(document,false);
                BufferedWriter bWritter = new BufferedWriter(writter);
                bWritter.write(this.jTextPane1.getText());
                bWritter.flush();
                bWritter.close();

            } catch (IOException ex) {
                Logger.getLogger(editor.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void buttonCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCutActionPerformed
        Archivo ar = new Archivo(this.jTextPane1.getText());
        ar.setDoc(this.jTextPane1.getStyledDocument());
        Memento state = ar.createMemento();
        history.addMemento(state);
        this.jTextPane1.cut();
    }//GEN-LAST:event_buttonCutActionPerformed

    private void buttonCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCopyActionPerformed
        this.jTextPane1.copy();
    }//GEN-LAST:event_buttonCopyActionPerformed

    private void buttonPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPasteActionPerformed
        Archivo ar = new Archivo(this.jTextPane1.getText());
        Memento state = ar.createMemento();
        history.addMemento(state);
        this.jTextPane1.paste();
    }//GEN-LAST:event_buttonPasteActionPerformed

    private void buttonUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUndoActionPerformed
        Memento previous = history.previousMemento(this.jTextPane1.getText());
        if(previous == null){
            
        }
        else{
            this.jTextPane1.setText(previous.getArchivo().getText());
        }
        
    }//GEN-LAST:event_buttonUndoActionPerformed

    private void buttonRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRedoActionPerformed
        Memento next = history.nextMemento();
        if(next == null){
            
        }
        else{
            this.jTextPane1.setText(next.getArchivo().getText());
        }
       
        
    }//GEN-LAST:event_buttonRedoActionPerformed

    private void botonBlackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBlackActionPerformed

        StyledDocument sdco = this.jTextPane1.getStyledDocument();
        Style s = sdco.addStyle("Black", null);
        StyleConstants.setForeground(s, Color.black);
        sdco.setCharacterAttributes(this.jTextPane1.getSelectionStart(),this.jTextPane1.getSelectedText().length(),s,false);
        //this.jTextPane1.setForeground(Color.BLACK);
    }//GEN-LAST:event_botonBlackActionPerformed

    private void botonBlueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBlueActionPerformed
        StyledDocument sdco = this.jTextPane1.getStyledDocument();
        Style s = sdco.addStyle("Blue", null);
        StyleConstants.setForeground(s, Color.blue);
        sdco.setCharacterAttributes(this.jTextPane1.getSelectionStart(),this.jTextPane1.getSelectedText().length(),s,false);
        //this.jTextPane1.setForeground(Color.BLUE);
    }//GEN-LAST:event_botonBlueActionPerformed

    private void botonRedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRedActionPerformed
        StyledDocument sdco = this.jTextPane1.getStyledDocument();
        Style s = sdco.addStyle("Red", null);
        StyleConstants.setForeground(s, Color.red);
        sdco.setCharacterAttributes(this.jTextPane1.getSelectionStart(),this.jTextPane1.getSelectedText().length(),s,false);
        //this.jTextPane1.setForeground(Color.RED);
    }//GEN-LAST:event_botonRedActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       this.jTextPane1.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void buttonsOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonsOpenActionPerformed
        JFileChooser fileChooser = new JFileChooser("f:");
        int aprooved = fileChooser.showOpenDialog(null);
        if(aprooved == JFileChooser.APPROVE_OPTION){
            File document = new File(fileChooser.getSelectedFile().getAbsolutePath());
            try{
                String s1 = "", sl = ""; 
  
                FileReader reader = new FileReader(document); 
  
                BufferedReader bufferedReader = new BufferedReader(reader); 
  
                sl = bufferedReader.readLine(); 
                    
                while ((s1 = bufferedReader.readLine()) != null) { 
                    sl = sl + "\n" + s1; 
                } 
  
                this.jTextPane1.setText(sl); 
            } catch (FileNotFoundException ex) {
                Logger.getLogger(editor.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(editor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_buttonsOpenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new editor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonBlack;
    private javax.swing.JButton botonBlue;
    private javax.swing.JButton botonRed;
    private javax.swing.JButton buttonCopy;
    private javax.swing.JButton buttonCut;
    private javax.swing.JButton buttonPaste;
    private javax.swing.JButton buttonRedo;
    private javax.swing.JButton buttonSave;
    private javax.swing.JButton buttonUndo;
    private javax.swing.JButton buttonsOpen;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
}
